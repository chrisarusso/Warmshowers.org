<?php
/**
 * @file
 * Site helpers for warmshowers.org
 *
 */


/**
 * Implements hook_menu().
 *
 * @return array
 */
function warmshowers_site_menu() {
  // This page is simply to let an auth user view what the unauth user will see.
  $items['frontpage'] = array(
    'title' => 'Warm Showers',
    'page callback' => 'warmshowers_site_front_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['mandrill_incoming_status'] = array(
    'page callback' => 'warmshowers_site_mandrill_incoming_status_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Return empty content for our front page so it doesn't have to render real content.
 *
 * @return string
 */
function warmshowers_site_front_page() {
  return '';
}

// Alter the user-to-user contact form to (by default) copy the sender
function warmshowers_site_form_contact_mail_user_alter(&$form, $form_state) {
  $form['copy']['#default_value'] = TRUE;
}

// Alter contact form mail with userful info for admin
function warmshowers_site_mail_alter($message) {
  if ($message['id'] == 'contact_page_mail') {
    $account = NULL;
    if ($GLOBALS['user']->uid != 0) {
      $account =& $GLOBALS['user'];
    }
    else {
      $account = user_load(array('mail' => $message['params']['mail']));
    }
    if (!empty($account)) {
      $created = format_date($account->created, 'long', '', 'MDT');
      $languages = language_list();
      $domain = $languages[$account->language]->domain;
      $validate_link = "{$domain}/toboggan/revalidate/{$account->uid}";
      $mandrill_link = "https://mandrillapp.com/activity/?q=" . urlencode($account->mail);
      if (empty($account->roles[2])) {
        $status = "NOT Validated (<a href='{$validate_link}'>Resend validation link</a>";
      }
      else {
        $status = "Validated";
      }
      $suffix = <<<EOT
---<br/>
From: <a href="https://www.warmshowers.org/user/{$account->uid}">{$account->fullname}</a> ({$account->name})
Status when email sent: {$status}
Edit: https://www.warmshowers.org/user/{$account->uid}/edit
Mandrill Link: {$mandrill_link}
Account created: $created
<b><a href="https://www.warmshowers.org/user/{$account->uid}/admin_details">Current status link</a></b>
EOT;
    }
    else {
      $suffix = "<br/>---<br/>From unregistered user";
    }

    if (is_array($message['body'])) {
      $message['body'][] = $suffix;
    }
    else {
      $message['body'] .= $suffix;
    }
  }
}

/**
 * Alter user profile form.
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_user_profile_form_alter(&$form, &$form_state) {
  // On submit of user form, go to view instead of staying on edit.
  if (empty($form['submit']['#submit'])) {
    // First make sure we have all the submit handlers from the form
    $form['submit']['#submit'] = $form['#submit'];
    // And now add our own, which only does the $form_state['redirect']
    $form['submit']['#submit'][] = 'warmshowers_site_user_profile_form_submit';
  }

  // Hide the comment_notify user-page settings, and make the default be
  // always send updates.
  $form['comment_notify_settings']['#access'] = FALSE;
  $form['comment_notify_settings']['node_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['node_notify_mailalert']['#value'] = TRUE;

  $form['comment_notify_settings']['comment_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['comment_notify_mailalert']['#value'] = TRUE;

  // Hide the option to turn off or otherwise configure privatemsg.
  $form['privatemsg']['#access'] = FALSE;
  // Hide the option to configure htmlmail
  $form['htmlmail']['#access'] = FALSE;

}

/**
 * Submit handler for form alter of user profile form.
 *
 * After saving, go to the user profile page which was being edited.
 */
function warmshowers_site_user_profile_form_submit($form, &$form_state) {
  $account = user_load(array('name' => $form_state['values']['name']));
  if ($account) {
    $form_state['redirect'] =   'user/' . $account->uid;
  }
}

/**
 * Implement hook_form_alter() to change the crazy handling in user_delete module.
 * We don't want people to have any choice but to delete it all.
 */
function warmshowers_site_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_confirm_delete':
      _warmshowers_site_alter_user_delete($form, $form_state, $form_id);
      break;

    // Use a translatable name for button instead of just "Delete".
    case 'user_profile_form':
      if (!empty($form['delete'])) {
        $form['delete']['#value'] = t("Delete Account");
      }
      break;

    // Get rid of the input filter stuff on comment.
    // Also change comment notification default values.
    case 'comment_form':
      $form['comment_filter']['format']['#access'] = FALSE;

      $form['notify_settings']['notify']['#default_value'] = TRUE;
      $form['notify_settings']['notify_type']['#default_value'] = 2;

      break;

    // Provide a default expiration for forum nodes. Depends on scheduler module.
    case 'forum_node_form':
      if (isset($form['scheduler_settings']['unpublish_on']) && empty($form['scheduler_settings']['unpublish_on']['#default_value'])) {
        $form['scheduler_settings']['unpublish_on']['#default_value'] = date('Y-m-d H:m:s', time() + variable_get('warmshowers_site_forum_expiration', 31536000));
      }
      break;
  }
}

/**
 * Form handling for user delete is dependent on who is doing it and what they
 * want to do. Since it's a little complicated, factored out into this function.
 *
 * What we want to do is provide one option for the admin (keep content or not,
 * based on whether it's a spammer or not) and no options for the user. Their
 * content will be retained.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function _warmshowers_site_alter_user_delete(&$form, &$form_state, $form_id) {
  $acting_user = $GLOBALS['user'];
  $account_to_delete = $form['_account']['#value'];

  // If they are deleting themselves, then don't offer any options, but keep
  // the stuff they have posted.
  if ($acting_user->uid == $account_to_delete->uid) {
    $form['user_delete_action'] = array(
      '#type' => 'value',
      '#value' => 'user_delete_reassign',
    );
    $form['description']['#value'] = t('The user account %account will be deleted, but feedback and other postings will be retained.', array('%account' => $account_to_delete->name));
  }

  //Else if admin is deleting a user, hide the "block" options and allow either
  // a spammer approach or non-spammer approach.
  else if (user_access('administer users')) {
    $form['user_delete_action']['#default_value'] = 'user_delete_delete';
    unset($form['user_delete_action']['#options']['user_delete_block'], $form['user_delete_action']['#options']['user_delete_block_unpublish']);
  }
  $form['actions']['submit']['#value'] = t('Delete user account "@account"', array('@account' => $account_to_delete->name));
}

/**
 * Implements hook_block()
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return array|string
 */
function warmshowers_site_block($op = 'list', $delta = 0, $edit = array()) {

  if ($op == 'list') {
    $blocks['warmshowers_site_social_links'] = array(
      'info' => t('[warmshowers_site] Social Links'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'warmshowers_site_social_links':
        $block['subject'] = '';
        $block['content'] = theme('warmshowers_site_social_links');
        return $block;
    }
  }
}

/**
 * Implements hook_theme()
 */
function warmshowers_site_theme() {
  $template_path = drupal_get_path('module', 'warmshowers_site') . '/templates';
  $items = array(
    'warmshowers_site_social_links' => array(
      'path' => $template_path,
      'template' => 'warmshowers_site_social_links_block',
    ),
  );
  return $items;
}


/**
 * Implements hook_menu_alter().
 *
 * Change the permissions for tracker display.
 */
function warmshowers_site_menu_alter(&$items) {
  // Change some items on user menu to no longer be MENU_LOCAL_TASK
  $removals = array('track', 'contact', 'location');
  foreach ($removals as $removal) {
    $path = "user/%user/" . $removal;
    if (!empty($items[$path])) {
      $items[$path]['type'] = MENU_NORMAL_ITEM;
    }
  }
  $items['user/%user/view']['title'] = 'Profile';

  // We don't want the node river of news page out there.
  unset($items['node']);

  // Stop using contact form for member contact, and use privatemsg
  // instead
  $items['user/%user/contact'] = array(
    'title' => 'Contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('warmshowers_site_contact_mail_user', 1),
    'type' => MENU_CALLBACK,
    'access callback' => '_contact_user_tab_access',
    'access arguments' => array(1),
  );
}


/**
 * Replaces the contact module's form with our own, which just submits
 * to privatemsg.
 *
 * @param $form_state
 * @param $recipient
 * @return mixed
 */
function warmshowers_site_contact_mail_user(&$form_state, $recipient) {
  global $user;
  $form['#token'] = $user->name . $user->mail;
  $form['recipient'] = array('#type' => 'value', '#value' => $recipient);
  $form['from'] = array('#type' => 'item',
    '#title' => t('From'),
    '#value' => theme('username', $user) .' &lt;'. check_plain($user->mail) .'&gt;',
  );
  $form['to'] = array('#type' => 'item',
    '#title' => t('To'),
    '#value' => theme('username', $recipient),
  );
  $form['subject'] = array('#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 50,
    '#required' => TRUE,
  );
  $form['message'] = array('#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 15,
    '#required' => TRUE,
  );
  $form['copy'] = array(
    '#type' => 'hidden', // Hide from regular UI, but apps might still use it.
    '#title' => t('Send yourself a copy.'),
  );
  $form['submit'] = array('#type' => 'submit',
    '#value' => t('Send e-mail'),
  );
  return $form;
}

/**
 * Process the personal contact page wrapper.
 */
function warmshowers_site_contact_mail_user_submit($form, &$form_state) {
  global $user, $language;

  $account = $form_state['values']['recipient'];
  $account->type = 'user';
  $account->recipient = $account->uid;

  $result = privatemsg_new_thread(array($account), $form_state['values']['subject'], $form_state['values']['message']);

  drupal_set_message(t('The message has been sent.'));

  // Back to the requested users profile page.
  $form_state['redirect'] = "user/$account->uid";
}

/**
 * Implements hook_services_resources_alter()
 *
 * We provide our own login service so that we can allow either username or
 * email address for the username.
 *
 * @param $resources
 * @param $endpoint
 */
function warmshowers_site_services_resources_alter(&$resources, $endpoint) {
  $resources['user']['actions']['login'] = array(
    'help' => 'Login a user for a new session - allows email address as username',
    'callback' => 'warmshowers_site_user_resource_login',
    'file' => array(
      'type' => 'module',
      'module' => 'warmshowers_site',
    ),
    'args' => array(
      array(
        'name' => 'username',
        'type' => 'string',
        'description' => 'A valid username or associated email address',
        'source' => array('data' => 'username'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'password',
        'type' => 'string',
        'description' => 'A valid password',
        'source' => array('data' => 'password'),
        'optional' => FALSE,
      ),
    ),
    'access callback' => 'services_access_menu',
  );

}


/**
 * Login a user using the specified credentials.
 *
 * Copied from user_resource.inc: _user_resource_login(), but with addition
 * of allowing the email address as username.
 *
 * Note this will transfer a plaintext password.
 *
 * @param $username
 *   Username to be logged in.
 * @param $password
 *   Password, must be plain text and not hashed.
 *
 * @return
 *   A valid session object.
 */
function warmshowers_site_user_resource_login($username, $password) {
  global $user;

  if ($user->uid) {
    // user is already logged in
    return services_error(t('Already logged in as !user.', array('!user' => $user->name)), 406);
  }

  // Handle the case where they have provided an email address. From logintoboggan.
  $name_from_email = db_result(db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER('%s')", $username));
  if (!empty($name_from_email)) {
    $username = $name_from_email;
  }

  user_authenticate(array('name' => $username, 'pass' => $password));

  if (isset($user->uid) && $user->uid) {
    // Regenerate the session ID to prevent against session fixation attacks.
    sess_regenerate();

    $return = new stdClass();
    $return->sessid = session_id();
    $return->session_name = session_name();

    services_remove_user_data($user);

    $return->user = $user;

    return $return;
  }
  session_destroy();
  return services_error(t('Wrong username or password.'), 401);
}


/**
 * Implements hook_preprocess_node() as a poor man's access control.
 * We never want the anon user (google) to access feedback nodes in any way.
 * So just return 404 in that case.
 *
 * This could have been done with content_access, but it seems like such a
 * waste to add access control.
 *
 * @param $variables
 */
function warmshowers_site_preprocess_node(&$variables) {
  if ( !$GLOBALS['user']->uid && $variables['node']->type == 'trust_referral') {
    drupal_not_found();
  }
}


/**
 * Simple page intended for nagios consumption; determine how long since
 * last mandrill incoming.
 */
function warmshowers_site_mandrill_incoming_status_page() {
  $elapsed = time() - variable_get('mandrill_incoming_last_success_timestamp', 0);
  if ($elapsed > variable_get('warmshowers_site_mandrill_incoming_threshhold', 7200)) {
    $output =  t("Mandrill Incoming Is Stale, last received=%date", array('%date' => format_date(variable_get('mandrill_incoming_last_success_timestamp', 0))));
  }
  else {
    $output = t("Mandrill OK,last received=%date", array('%date' => format_date(variable_get('mandrill_incoming_last_success_timestamp', 0))));
  }
  print $output;
  exit(0);
}
